/*******************************************************************************
 * Copyright (c) 2021, DigiDNA
 * All rights reserved
 *
 * This Source Code Form is subject to the terms of the MVT License, v. 1.1.
 * If a copy of the MVT License was not distributed with this file, you can
 * obtain one at https://license.mvt.re/1.1/.
 ******************************************************************************/

#ifndef DDNA_INDICATORS_HPP
#define DDNA_INDICATORS_HPP

#include <string>
#include <vector>
#include <map>
#include <tuple>
#include <DDNA/Core.hpp>
#include <CF++.hpp>
#include <DDNAToolKit/C++/MobileDevice/Diagnostics/MalwareActivityChecker/DDNA-MalwareCheckResult.hpp>

namespace DDNA
{
    class STIXIndicators
    {
        public:
            static const char * const ErrorDomain;
            
            STIXIndicators();
            STIXIndicators( const std::vector< std::string > & stixLocalPaths, Core::Error & error );
            STIXIndicators( const STIXIndicators & o );
            STIXIndicators( STIXIndicators && o ) noexcept;
            ~STIXIndicators();
            
            STIXIndicators & operator =( STIXIndicators o );
            
            friend void swap( STIXIndicators & o1, STIXIndicators & o2 );
            
            /* { result, final (expanded) URL } */
            std::tuple< MalwareCheckResult, std::string > checkURL( std::string value, Core::Error & error ) const;
            
            MalwareCheckResult checkProcess( std::string value ) const;
            MalwareCheckResult checkEmail(   std::string value ) const;
            MalwareCheckResult checkFile(    std::string value ) const;
            
            
            /* { value, { indicator, malware } } */
            using IndicatorEntry = std::map< std::string, std::pair< CF::Dictionary, CF::Dictionary > >;
            
            DDNA_PROPERTY_READONLY( IndicatorEntry, domains );
            DDNA_PROPERTY_READONLY( IndicatorEntry, processes );
            DDNA_PROPERTY_READONLY( IndicatorEntry, emails );
            DDNA_PROPERTY_READONLY( IndicatorEntry, files );
            
        private:
            
            bool        urlIsShortened( const std::string & url )                    const;
            std::string unshortenURL( const std::string & url, Core::Error & error ) const;
            void        log( const std::string & message )                           const;
            
            #ifdef DEBUG
            void test() const;
            #endif
            
            bool _inited;
    };
}

#endif /* DDNA_INDICATORS_HPP */
