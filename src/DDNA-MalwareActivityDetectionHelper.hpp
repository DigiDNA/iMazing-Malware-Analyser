/*******************************************************************************
 * Copyright (c) 2021, DigiDNA
 * All rights reserved
 *
 * This Source Code Form is subject to the terms of the MVT License, v. 1.1.
 * If a copy of the MVT License was not distributed with this file, you can
 * obtain one at https://license.mvt.re/1.1/.
 ******************************************************************************/

#ifndef DDNA_MALWARE_ACTIVITY_DETECTION_H
#define DDNA_MALWARE_ACTIVITY_DETECTION_H

#include <DDNAToolKit/C++/MobileDevice/Devices/DDNA-iOSDevice.hpp>
#include <DDNAToolKit/C++/MobileDevice/Backups/DDNA-Backup.hpp>
#include <DDNAToolKit/C++/Base/DDNA-Config.hpp>
#include <DDNA/Core.hpp>
#include <DDNAToolKit/C++/SQLite/DDNA-SQLite-QueryDictionary.hpp>
#include <DDNAToolKit/C++/SQLite/DDNA-SQLite-SelectQuery.hpp>

#define EVENT_DEVICE_BACKUP_INFO            "Device Backup"
#define EVENT_BACKUP_PARSING_INFO           "Backup Parsing"
#define EVENT_STIX_DOWNLOAD_INFO            "STIX Download"
#define EVENT_EXTRACTED_FROM_BACKUP_INFO    "Backup Extraction"
#define EVENT_HTTP_REDIRECT_INFO            "HTTP Redirect"
#define EVENT_ANALYSING_ITEMS_INFO          "Analysis"
#define EVENT_BACKUP_FILE_NOT_FOUND         "File Not Found In Backup"
#define EVENT_BACKUP_EXTRACTION_ERROR       "Backup Extraction Error"
#define EVENT_DB_QUERY_ERROR                "Database Query Error"
#define EVENT_PLIST_CORRUPTED_ERROR         "Property List Corrupted Error"
#define EVENT_PLIST_DICT_IS_EMPTY_ERROR     "Property List Dictionary Is Empty"
#define EVENT_INDICATOR_MATCH_EMAIL         "Indicator Match - Email"
#define EVENT_INDICATOR_MATCH_DOMAIN        "Indicator Match - Domain"
#define EVENT_INDICATOR_MATCH_FILE          "Indicator Match - File"
#define EVENT_INDICATOR_MATCH_PROCESS       "Indicator Match - Process"
#define EVENT_SUSCPICIOUS_VALUE             "Suspicious Value"
#define EVENT_SUSCPICIOUS_FILENAME          "Suspicious Filename"
#define EVENT_SUSCPICIOUS_PROCESS           "Suspicious Process"

namespace DDNA
{
    class STIXIndicators;
    class MalwareCheckResult;

    namespace MalwareActivityDetectionHelper
    {
        static const char * const ErrorDomain = "com.DigiDNA.MobileDevice.MalwareActivityDetectionHelper";;
    
        Core::RecursiveLock &       GetLock( void );
        STIXIndicators              LoadSTIXFiles( const std::string stixFolderPath, Core::Progress & progress, std::vector< MalwareCheckResult > & results, Core::Error & e );
        std::shared_ptr< sqlite3 >  ExtractAndOpenSQLiteDB( Core::SafePointer< Backup > backup, const std::string & backupDomain, const std::string & backupPath, const std::string & malwareCheckName, std::vector< MalwareCheckResult > & results );
        CF::Dictionary              ExtractPropertyList( Core::SafePointer< Backup > backup, const std::string & backupDomain, const std::string & backupPath, bool checkIfDictionaryIsEmpty, const std::string & malwareCheckName, std::vector< MalwareCheckResult > & results, Core::Error & e );
        std::string                 MalwareFolderLocalPath( void );
        std::string                 MalwareFolderLocalPath( Core::SafePointer< Backup > backup );
        bool                        WriteMalwareCheckResultsToLogFile( std::vector< MalwareCheckResult > & results, const std::string & logPath, bool logAsExcel, Core::Error & e );
        std::vector< std::string >  FindLinks( std::string text );
        std::string                 AppName( const std::string & bundleID );
        std::string                 AppIconPath( const std::string & bundleID );
        double                      AppleTimestampToUnixTimestamp( double appleTimestamp );
    }
}

#endif /* DDNA_MALWARE_ACTIVITY_DETECTION_H */
