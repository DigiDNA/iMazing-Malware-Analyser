/*******************************************************************************
 * Copyright (c) 2021, DigiDNA
 * All rights reserved
 *
 * This Source Code Form is subject to the terms of the MVT License, v. 1.1.
 * If a copy of the MVT License was not distributed with this file, you can
 * obtain one at https://license.mvt.re/1.1/.
 ******************************************************************************/

#include <DDNAToolKit/C++/MobileDevice/Diagnostics/MalwareActivityChecker/DDNA-MalwareCheckResult.hpp>

#include <DDNA/Core.hpp>

namespace DDNA
{
    MalwareCheckResult::MalwareCheckResult( void ):
        _isSuspicious(      false ),
        _type(              Type::Unknown ),
        _severity(          Severity::Unknown ),
        _timestamp(         0 ),
        _creationTimestamp( Core::DateTime::UTCNow() ),
        _sortingIndex(      0 )
    {}
    
    MalwareCheckResult::MalwareCheckResult( const std::string & malwareName, const std::string & event ):
        _isSuspicious(      true ),
        _type(              Type::Device ),
        _severity(          Severity::Critical ),
        _malwareName(       malwareName ),
        _timestamp(         0 ),
        _creationTimestamp( Core::DateTime::UTCNow() ),
        _sortingIndex(      0 ),
        _event(             event )
    {}
    
    MalwareCheckResult::MalwareCheckResult( Type type, Severity severity, double timestamp, const std::string & malwareCheckName, const std::string & event, const std::string & data, std::vector< MalwareCheckResult > & results ):
        _isSuspicious(      severity == Severity::Critical ),
        _type(              type ),
        _severity(          severity ),
        _malwareCheckName(  malwareCheckName ),
        _timestamp(         timestamp != 0 ? timestamp : Core::DateTime::UTCNow() ),
        _creationTimestamp( Core::DateTime::UTCNow() ),
        _sortingIndex(      results.size() + 1 ),
        _event(             event ),
        _data(              Core::String::replace( data, "\n", " - " ) )
    {
        results.push_back( *( this ) );
    }
    
    MalwareCheckResult::MalwareCheckResult( const MalwareCheckResult & o ):
        _isSuspicious(      o._isSuspicious ),
        _type(              o._type ),
        _severity(          o._severity ),
        _malwareName(       o._malwareName ),
        _malwareCheckName(  o._malwareCheckName ),
        _timestamp(         o._timestamp ),
        _creationTimestamp( o._creationTimestamp ),
        _sortingIndex(      o._sortingIndex ),
        _event(             o._event ),
        _data(              o._data )
    {}
    
    MalwareCheckResult::MalwareCheckResult( MalwareCheckResult && o ) noexcept:
        _isSuspicious(      std::move( o._isSuspicious ) ),
        _type(              std::move( o._type ) ),
        _severity(          std::move( o._severity ) ),
        _malwareName(       std::move( o._malwareName ) ),
        _malwareCheckName(  std::move( o._malwareCheckName ) ),
        _timestamp(         std::move( o._timestamp ) ),
        _creationTimestamp( std::move( o._creationTimestamp ) ),
        _sortingIndex(      std::move( o._sortingIndex ) ),
        _event(             std::move( o._event ) ),
        _data(              std::move( o._data ) )
    {}
    
    MalwareCheckResult::~MalwareCheckResult()
    {}
    
    MalwareCheckResult & MalwareCheckResult::operator =( MalwareCheckResult o )
    {
        swap( *( this ), o );
        
        return *( this );
    }
    
    void swap( MalwareCheckResult & o1, MalwareCheckResult & o2 )
    {
        using std::swap;
        
        swap( o1._isSuspicious,         o2._isSuspicious );
        swap( o1._type,                 o2._type );
        swap( o1._severity,             o2._severity );
        swap( o1._malwareName,          o2._malwareName );
        swap( o1._malwareCheckName,     o2._malwareCheckName );
        swap( o1._timestamp,            o2._timestamp );
        swap( o1._creationTimestamp,    o2._creationTimestamp );
        swap( o1._sortingIndex,         o2._sortingIndex );
        swap( o1._event,                o2._event );
        swap( o1._data,                 o2._data );
    }
    
    void MalwareCheckResult::addToResults( const std::string & malwareCheckName, double timestamp, const std::string & data, std::vector< MalwareCheckResult > & results )
    {
        this->malwareCheckName( malwareCheckName );
        this->timestamp( timestamp );
        this->data( data );
        
        results.push_back( *( this ) );
        
        this->sortingIndex( results.size() );
    }
}
