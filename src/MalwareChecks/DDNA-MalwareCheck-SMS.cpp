/*******************************************************************************
 * Copyright (c) 2021, DigiDNA
 * All rights reserved
 *
 * This Source Code Form is subject to the terms of the MVT License, v. 1.1.
 * If a copy of the MVT License was not distributed with this file, you can
 * obtain one at https://license.mvt.re/1.1/.
 ******************************************************************************/

#include <DDNAToolKit/C++/MobileDevice/Diagnostics/MalwareActivityChecker/MalwareChecks/DDNA-MalwareCheck-SMS.hpp>
#include <DDNAToolKit/C++/MobileDevice/Diagnostics/MalwareActivityChecker/DDNA-MalwareActivityDetectionHelper.hpp>

#define BACKUP_DOMAIN   "HomeDomain"
#define BACKUP_PATH     "Library/SMS/sms.db"

namespace DDNA
{
    namespace MalwareChecks
    {
        std::string SMS::name() const
        {
            return "Messages";
        }
        
        std::string SMS::image() const
        {
            return "com.apple.MobileSMS";
        }
        
        void SMS::run( Core::SafePointer< Backup > backup, const STIXIndicators & indicators, std::vector< MalwareCheckResult > & results, Core::Progress & progress )
        {
            progress.message( Core::L10N( "MalwareActivityDetectionCheckSMS_Info" ) );
            
            std::string                domain = BACKUP_DOMAIN;
            std::string                path   = BACKUP_PATH;
            std::shared_ptr< sqlite3 > db     = MalwareActivityDetectionHelper::ExtractAndOpenSQLiteDB( backup, domain, path, this->name(), results );
            
            if( db == nullptr )
            {
                return;
            }
            
            SQLite::QueryDictionary queryDict = db.get();
            std::string             query     = R"query(
                
                SELECT
                    message.*,
                    handle.id as "phone_number"
                FROM message, handle
                WHERE handle.rowid = message.handle_id;
                
            )query";
            
            std::vector< CF::Dictionary > records = queryDict.executeQuery( query );
            
            if( records.size() == 0 )
            {
                if( queryDict.errorMessage().length() > 0 )
                {
                    MalwareCheckResult( MalwareCheckResult::Type::Analyzer, MalwareCheckResult::Severity::Warning, 0, this->name(), EVENT_DB_QUERY_ERROR, "'" + domain + "/" + path + "' cannot be parsed (" +  queryDict.errorMessage() + ").", results );
                }
                else
                {
                    MalwareCheckResult( MalwareCheckResult::Type::Analyzer, MalwareCheckResult::Severity::Info, 0, this->name(), EVENT_ANALYSING_ITEMS_INFO, "No messages to analyze.", results );
                }
                
                return;
            }
            
            MalwareCheckResult( MalwareCheckResult::Type::Analyzer, MalwareCheckResult::Severity::Info, 0, this->name(), EVENT_ANALYSING_ITEMS_INFO, "Analyzing " + std::to_string( records.size() ) + " messages.", results );
            
            for( const auto & record: records )
            {
                std::string text     = CF::String( record[ "text" ] );
                std::string phone    = CF::String( record[ "phone_number" ] );
                int64_t     nanosecs = CF::Number( record[ "date" ] );
                double      ts       = CF::Number( Core::DateTime( nanosecs / 1000000000, Core::DateTime::Epoch::Apple ) );
                
                for( const auto & url: MalwareActivityDetectionHelper::FindLinks( text ) )
                {
                    Core::Error error    = {};
                    bool        received = CF::Number( record[ "is_from_me" ] ) == 0;
                    auto        check    = indicators.checkURL( url, error );
                    auto        res      = std::get< 0 >( check );
                    auto        finalURL = std::get< 1 >( check );
                    
                    if( error.failure() )
                    {
                        MalwareCheckResult( MalwareCheckResult::Type::Analyzer, MalwareCheckResult::Severity::Warning, 0, this->name(), EVENT_ANALYSING_ITEMS_INFO, error.message(), results );
                    }
                    
                    if( res.isSuspicious() )
                    {
                        std::string data;
                        
                        if( received )
                        {
                            data = "Message from '" + phone + "' with url: '" + finalURL + "'.";
                        }
                        else
                        {
                            data = "Message to '" + phone + "' with url: '" + finalURL + "'.";
                        }

                        res.addToResults
                        (
                            this->name(),
                            ts,
                            data,
                            results
                        );
                    }
                }
            }
        }
    }
}
