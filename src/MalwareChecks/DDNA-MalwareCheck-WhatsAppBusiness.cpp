/*******************************************************************************
 * Copyright (c) 2021, DigiDNA
 * All rights reserved
 *
 * This Source Code Form is subject to the terms of the MVT License, v. 1.1.
 * If a copy of the MVT License was not distributed with this file, you can
 * obtain one at https://license.mvt.re/1.1/.
 ******************************************************************************/

#include <DDNAToolKit/C++/MobileDevice/Diagnostics/MalwareActivityChecker/MalwareChecks/DDNA-MalwareCheck-WhatsAppBusiness.hpp>
#include <DDNAToolKit/C++/MobileDevice/Diagnostics/MalwareActivityChecker/MalwareChecks/DDNA-MalwareCheck-WhatsApp.hpp>
#include <DDNAToolKit/C++/MobileDevice/Diagnostics/MalwareActivityChecker/DDNA-MalwareActivityDetectionHelper.hpp>

#define BACKUP_DOMAIN_1 "AppDomainGroup-group.net.whatsapp.WhatsAppSMB.shared"
#define BACKUP_DOMAIN_2 "AppDomain-net.whatsapp.WhatsAppSMB"
#define BACKUP_PATH     "ChatStorage.sqlite"

namespace DDNA
{
    namespace MalwareChecks
    {
        std::string WhatsAppBusiness::name( void ) const
        {
            return "WhatsApp Business";
        }
        
        std::string WhatsAppBusiness::image( void ) const
        {
            return MalwareActivityDetectionHelper::AppIconPath( "net.whatsapp.WhatsAppSMB" );
        }
        
        std::vector< iOSDataset > WhatsAppBusiness::iOSDatasets( void ) const
        {
            return
            {
                iOSDataset::customDatasetForTemporaryExtraction
                (
                    "net.whatsapp.WhatsAppSMB",
                    { FOLDER_WILDCARD + BACKUP_PATH },
                    {
                        {
                            BACKUP_DOMAIN_1,
                            {
                                BACKUP_PATH
                            }
                        },
                        {
                            BACKUP_DOMAIN_1,
                            {
                                BACKUP_PATH
                            }
                        }
                    }
                )
            };
        }
        
        void WhatsAppBusiness::run( Core::SafePointer< Backup > backup, const STIXIndicators & indicators, std::vector< MalwareCheckResult > & results, Core::Progress & progress )
        {
            progress.message( Core::L10N( "MalwareActivityDetectionCheckWhatsAppBusiness_Info" ) );
            
            if( !backup->mbdbRecordExists( BACKUP_DOMAIN_1, BACKUP_PATH ) && !backup->mbdbRecordExists( BACKUP_DOMAIN_2, BACKUP_PATH ) )
            {
                return;
            }
            
            std::string domain = BACKUP_DOMAIN_1;
            std::string path   = BACKUP_PATH;
            
            if( !backup->mbdbRecordExists( domain, path ) )
            {
                domain = BACKUP_DOMAIN_2;
            }
            
            std::shared_ptr< sqlite3 > db = MalwareActivityDetectionHelper::ExtractAndOpenSQLiteDB( backup, domain, path, this->name(), results );
            
            if( db == nullptr )
            {
                return;
            }
            
            this->analyzeMessages( db.get(), indicators, results, domain, path );
            this->analyzeMediaItems( db.get(), indicators, results, domain, path );
        }
    }
}
