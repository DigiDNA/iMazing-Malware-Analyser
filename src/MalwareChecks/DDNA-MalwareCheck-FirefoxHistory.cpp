/*******************************************************************************
 * Copyright (c) 2021, DigiDNA
 * All rights reserved
 *
 * This Source Code Form is subject to the terms of the MVT License, v. 1.1.
 * If a copy of the MVT License was not distributed with this file, you can
 * obtain one at https://license.mvt.re/1.1/.
 ******************************************************************************/

#include <DDNAToolKit/C++/MobileDevice/Diagnostics/MalwareActivityChecker/MalwareChecks/DDNA-MalwareCheck-FirefoxHistory.hpp>
#include <DDNAToolKit/C++/MobileDevice/Diagnostics/MalwareActivityChecker/DDNA-MalwareActivityDetectionHelper.hpp>

#define BACKUP_DOMAIN   "AppDomainGroup-group.org.mozilla.ios.Firefox"
#define BACKUP_PATH     "profile.profile/browser.db"

namespace DDNA
{
    namespace MalwareChecks
    {
        std::string FirefoxHistory::name( void ) const
        {
            return "Firefox History";
        }
        
        std::string FirefoxHistory::image( void ) const
        {
            return MalwareActivityDetectionHelper::AppIconPath( "org.mozilla.ios.Firefox" );
        }
        
        std::vector< iOSDataset > FirefoxHistory::iOSDatasets( void ) const
        {
            return
            {
                iOSDataset::customDatasetForTemporaryExtraction
                (
                    "org.mozilla.ios.Firefox.history",
                    { DEVICE_PATH_WILDCARD + BACKUP_PATH },
                    {
                        {
                            BACKUP_DOMAIN,
                            {
                                BACKUP_PATH
                            }
                        }
                    }
                )
            };
        }
        
        void FirefoxHistory::run( Core::SafePointer< Backup > backup, const STIXIndicators & indicators, std::vector< MalwareCheckResult > & results, Core::Progress & progress )
        {
            progress.message( Core::L10N( "MalwareActivityDetectionCheckFirefoxHistory_Info" ) );
            
            if( !backup->mbdbRecordExists( BACKUP_DOMAIN, BACKUP_PATH ) )
            {
                return;
            }
                        
            std::string                domain = BACKUP_DOMAIN;
            std::string                path   = BACKUP_PATH;
            std::shared_ptr< sqlite3 > db     = MalwareActivityDetectionHelper::ExtractAndOpenSQLiteDB( backup, domain, path, this->name(), results );
            
            if( db == nullptr )
            {
                return;
            }
            
            SQLite::QueryDictionary queryDict = db.get();
            std::string             query     = R"query(
                
                SELECT
                    visits.id,
                    visits.date,
                    history.url,
                    history.title,
                    visits.is_local,
                    visits.type
                FROM visits, history
                WHERE visits.siteID = history.id;
                
            )query";
            
            std::vector< CF::Dictionary > records = queryDict.executeQuery( query );
            
            if( records.size() == 0 )
            {
                if( queryDict.errorMessage().length() > 0 )
                {
                    MalwareCheckResult( MalwareCheckResult::Type::Analyzer, MalwareCheckResult::Severity::Warning, 0, this->name(), EVENT_DB_QUERY_ERROR, "'" + domain + "/" + path + "' cannot be parsed (" +  queryDict.errorMessage() + ").", results );
                }
                else
                {
                    MalwareCheckResult( MalwareCheckResult::Type::Analyzer, MalwareCheckResult::Severity::Info, 0, this->name(), EVENT_ANALYSING_ITEMS_INFO, "No Firefox history entries to analyze.", results );
                }
                
                return;
            }
            
            MalwareCheckResult( MalwareCheckResult::Type::Analyzer, MalwareCheckResult::Severity::Info, 0, this->name(), EVENT_ANALYSING_ITEMS_INFO, "Analyzing " + std::to_string( records.size() ) + " Firefox history entries.", results );
            
            for( const auto & record: records )
            {
                Core::Error error    = {};
                std::string url      = CF::String( record[ "url" ] );
                double      ts       = CF::Number( record[ "date" ] );
                auto        check    = indicators.checkURL( url, error );
                auto        res      = std::get< 0 >( check );
                auto        finalURL = std::get< 1 >( check );
                
                if( error.failure() )
                {
                    MalwareCheckResult( MalwareCheckResult::Type::Analyzer, MalwareCheckResult::Severity::Warning, 0, this->name(), EVENT_ANALYSING_ITEMS_INFO, error.message(), results );
                }
                
                if( res.isSuspicious() )
                {
                    res.addToResults
                    (
                        this->name(),
                        ( ts / 1000000 ),
                        "Firefox visit to '" + finalURL + "'.",
                        results
                    );
                }
            }
        }
    }
}
