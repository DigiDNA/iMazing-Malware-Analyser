/*******************************************************************************
 * Copyright (c) 2021, DigiDNA
 * All rights reserved
 *
 * This Source Code Form is subject to the terms of the MVT License, v. 1.1.
 * If a copy of the MVT License was not distributed with this file, you can
 * obtain one at https://license.mvt.re/1.1/.
 ******************************************************************************/

#include <DDNAToolKit/C++/MobileDevice/Diagnostics/MalwareActivityChecker/MalwareChecks/DDNA-MalwareCheck-SMSAttachment.hpp>
#include <DDNAToolKit/C++/MobileDevice/Diagnostics/MalwareActivityChecker/DDNA-MalwareActivityDetectionHelper.hpp>

#define BACKUP_DOMAIN   "HomeDomain"
#define BACKUP_PATH     "Library/SMS/sms.db"

namespace DDNA
{
    namespace MalwareChecks
    {
        std::string SMSAttachment::name( void ) const
        {
            return "Messages Attachments";
        }
        
        std::string SMSAttachment::image( void ) const
        {
            return "com.apple.MobileSMS";
        }
        
        std::vector< iOSDataset > SMSAttachment::iOSDatasets( void ) const
        {
            return
            {
                iOSDataset::customDatasetForTemporaryExtraction
                (
                    "com.apple.MobileSMS.attachment",
                    { FOLDER_WILDCARD + BACKUP_PATH },
                    {
                        {
                            BACKUP_DOMAIN,
                            {
                                BACKUP_PATH
                            }
                        }
                    }
                )
            };
        }
        
        void SMSAttachment::run( Core::SafePointer< Backup > backup, const STIXIndicators & indicators, std::vector< MalwareCheckResult > & results, Core::Progress & progress )
        {
            progress.message( Core::L10N( "MalwareActivityDetectionCheckSMSAttachment_Info" ) );
            
            std::string                domain = BACKUP_DOMAIN;
            std::string                path   = BACKUP_PATH;
            std::shared_ptr< sqlite3 > db     = MalwareActivityDetectionHelper::ExtractAndOpenSQLiteDB( backup, domain, path, this->name(), results );
            
            if( db == nullptr )
            {
                return;
            }
            
            SQLite::QueryDictionary queryDict = db.get();
            std::string             query     = R"query(
                
                SELECT
                    attachment.ROWID as "attachment_id",
                    attachment.*,
                    message.service as "service",
                    handle.id as "phone_number"
                FROM attachment
                LEFT JOIN message_attachment_join ON message_attachment_join.attachment_id = attachment.ROWID
                LEFT JOIN message ON message.ROWID = message_attachment_join.message_id
                LEFT JOIN handle ON handle.ROWID = message.handle_id
                
            )query";
            
            queryDict.addTransformerForColumn( "created_date", SQLite::TransformTimestampAppleSecondsToUnix );
            
            std::vector< CF::Dictionary > records = queryDict.executeQuery( query );
            
            if( records.size() == 0 )
            {
                if( queryDict.errorMessage().length() > 0 )
                {
                    MalwareCheckResult( MalwareCheckResult::Type::Analyzer, MalwareCheckResult::Severity::Warning, 0, this->name(), EVENT_DB_QUERY_ERROR, "'" + domain + "/" + path + "' cannot be parsed (" +  queryDict.errorMessage() + ").", results );
                }
                else
                {
                    MalwareCheckResult( MalwareCheckResult::Type::Analyzer, MalwareCheckResult::Severity::Info, 0, this->name(), EVENT_ANALYSING_ITEMS_INFO, "No message attachments to analyze.", results );
                }
                
                return;
            }
            
            MalwareCheckResult( MalwareCheckResult::Type::Analyzer, MalwareCheckResult::Severity::Info, 0, this->name(), EVENT_ANALYSING_ITEMS_INFO, "Analyzing " + std::to_string( records.size() ) + " message attachments.", results );
            
            ( void )indicators;
            
            for( const auto & record: records )
            {
                int         received = CF::Number( record[ "is_outgoing" ] );
                std::string filename = CF::String( record[ "filename" ] );
                double      ts       = CF::Number( record[ "created_date" ] );
                
                if( filename.length() == 0 || received != 1 || filename.find( "/var/tmp/" ) != 0 || filename.substr( filename.length() -2, 2 ) != "-1" )
                {
                    continue;
                }
                
                MalwareCheckResult
                (
                    MalwareCheckResult::Type::Device,
                    MalwareCheckResult::Severity::Critical,
                    ts,
                    this->name(),
                    EVENT_SUSCPICIOUS_FILENAME,
                    "Found a suspicious message attachment: '" + filename + "'.",
                    results
                );
            }
        }
    }
}
