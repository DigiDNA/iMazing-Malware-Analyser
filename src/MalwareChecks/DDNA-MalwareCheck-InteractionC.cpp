/*******************************************************************************
 * Copyright (c) 2021, DigiDNA
 * All rights reserved
 *
 * This Source Code Form is subject to the terms of the MVT License, v. 1.1.
 * If a copy of the MVT License was not distributed with this file, you can
 * obtain one at https://license.mvt.re/1.1/.
 ******************************************************************************/

#include <DDNAToolKit/C++/MobileDevice/Diagnostics/MalwareActivityChecker/MalwareChecks/DDNA-MalwareCheck-InteractionC.hpp>
#include <DDNAToolKit/C++/MobileDevice/Diagnostics/MalwareActivityChecker/DDNA-MalwareActivityDetectionHelper.hpp>

#define BACKUP_DOMAIN   "HomeDomain"
#define BACKUP_PATH     "Library/CoreDuet/People/interactionC.db"

namespace DDNA
{
    namespace MalwareChecks
    {
        std::string InteractionC::name( void ) const
        {
            return "InteractionC";
        }
        
        std::string InteractionC::image( void ) const
        {
            return "Accounts";
        }
        
        std::vector< iOSDataset > InteractionC::iOSDatasets( void ) const
        {
            return
            {
                iOSDataset::customDatasetForTemporaryExtraction
                (
                    "com.apple.interactionC",
                    { DEVICE_PATH_WILDCARD + BACKUP_PATH },
                    {
                        {
                            BACKUP_DOMAIN,
                            {
                                BACKUP_PATH
                            }
                        }
                    }
                )
            };
        }
        
        void InteractionC::run( Core::SafePointer< Backup > backup, const STIXIndicators & indicators, std::vector< MalwareCheckResult > & results, Core::Progress & progress )
        {
            progress.message( Core::L10N( "MalwareActivityDetectionCheckInteractionC_Info" ) );
            
            // Since iOS 13, InteractionC is not accessible without encryption
            if( backup->iOSMajorVersion() > 12 && !backup->encrypted() )
            {
                MalwareCheckResult( MalwareCheckResult::Type::Analyzer, MalwareCheckResult::Severity::Warning, 0, this->name(), EVENT_BACKUP_FILE_NOT_FOUND, std::string( BACKUP_PATH ) + " is only available when backup encryption is enabled.", results );
                
                return;
            }
            
            std::string                domain = BACKUP_DOMAIN;
            std::string                path   = BACKUP_PATH;
            std::shared_ptr< sqlite3 > db     = MalwareActivityDetectionHelper::ExtractAndOpenSQLiteDB( backup, domain, path, this->name(), results );
            
            if( db == nullptr )
            {
                return;
            }
            
            SQLite::QueryDictionary queryDict = db.get();
            std::string             query     = R"query(
                
                SELECT
                    ZCONTACTS.ZIDENTIFIER,
                    ZINTERACTIONS.ZSTARTDATE,
                    ZINTERACTIONS.ZENDDATE,
                    ZINTERACTIONS.ZCREATIONDATE
                FROM ZINTERACTIONS
                LEFT JOIN ZCONTACTS ON ZINTERACTIONS.ZSENDER = ZCONTACTS.Z_PK
                
            )query";
            
            queryDict.addTransformerForColumn( "ZSTARTDATE",    SQLite::TransformTimestampAppleSecondsToUnix );
            queryDict.addTransformerForColumn( "ZENDDATE",      SQLite::TransformTimestampAppleSecondsToUnix );
            queryDict.addTransformerForColumn( "ZCREATIONDATE", SQLite::TransformTimestampAppleSecondsToUnix );
            
            std::vector< CF::Dictionary > records = queryDict.executeQuery( query );
            
            if( records.size() == 0 )
            {
                if( queryDict.errorMessage().length() > 0 )
                {
                    MalwareCheckResult( MalwareCheckResult::Type::Analyzer, MalwareCheckResult::Severity::Warning, 0, this->name(), EVENT_DB_QUERY_ERROR, "'" + domain + "/" + path + "' cannot be parsed (" +  queryDict.errorMessage() + ").", results );
                }
                else
                {
                    MalwareCheckResult( MalwareCheckResult::Type::Analyzer, MalwareCheckResult::Severity::Info, 0, this->name(), EVENT_ANALYSING_ITEMS_INFO, "No interactions to analyze.", results );
                }
                
                return;
            }
            
            MalwareCheckResult( MalwareCheckResult::Type::Analyzer, MalwareCheckResult::Severity::Info, 0, this->name(), EVENT_ANALYSING_ITEMS_INFO, "Analyzing " + std::to_string( records.size() ) + " interactions.", results );
            
            for( const auto & record: records )
            {
                std::string contact = CF::String( record[ "ZIDENTIFIER" ] );
                double      ts      = CF::Number( record[ "ZSTARTDATE" ] );
                
                if( contact.find( "@" ) == std::string::npos )
                {
                    continue;
                }
                
                MalwareCheckResult res = indicators.checkEmail( contact );
                
                if( res.isSuspicious() )
                {
                    res.addToResults
                    (
                        this->name(),
                        ts,
                        "Interaction with suspicious email address: '" + contact + "'.",
                        results
                    );
                }
            }
        }
    }
}
