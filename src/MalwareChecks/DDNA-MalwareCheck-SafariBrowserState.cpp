/*******************************************************************************
 * Copyright (c) 2021, DigiDNA
 * All rights reserved
 *
 * This Source Code Form is subject to the terms of the MVT License, v. 1.1.
 * If a copy of the MVT License was not distributed with this file, you can
 * obtain one at https://license.mvt.re/1.1/.
 ******************************************************************************/

#include <DDNAToolKit/C++/MobileDevice/Diagnostics/MalwareActivityChecker/MalwareChecks/DDNA-MalwareCheck-SafariBrowserState.hpp>
#include <DDNAToolKit/C++/MobileDevice/Diagnostics/MalwareActivityChecker/DDNA-MalwareActivityDetectionHelper.hpp>

#define BACKUP_DOMAIN       "HomeDomain"
#define BACKUP_DOMAIN_OLD   "AppDomain-com.apple.mobilesafari"
#define BACKUP_PATH         "Library/Safari/BrowserState.db"

namespace DDNA
{
    namespace MalwareChecks
    {
        std::string SafariBrowserState::name() const
        {
            return "Safari Browser State";
        }
        
        std::string SafariBrowserState::image() const
        {
            return "com.apple.mobilesafari";
        }
        
        void SafariBrowserState::run( Core::SafePointer< Backup > backup, const STIXIndicators & indicators, std::vector< MalwareCheckResult > & results, Core::Progress & progress )
        {
            progress.message( Core::L10N( "MalwareActivityDetectionCheckSafariBrowserState_Info" ) );
            
            std::string                domain = ( backup->iOSMajorVersion() < 13 ) ? BACKUP_DOMAIN_OLD : BACKUP_DOMAIN;
            std::string                path   = BACKUP_PATH;
            std::shared_ptr< sqlite3 > db     = MalwareActivityDetectionHelper::ExtractAndOpenSQLiteDB( backup, domain, path, this->name(), results );
            
            if( db == nullptr )
            {
                return;
            }
            
            SQLite::QueryDictionary queryDict = db.get();
            std::string             query     = R"query(
                
                SELECT
                    tabs.title,
                    tabs.url,
                    tabs.user_visible_url,
                    tabs.last_viewed_time,
                    tab_sessions.session_data
                FROM tabs
                JOIN tab_sessions ON tabs.uuid = tab_sessions.tab_uuid
                ORDER BY tabs.last_viewed_time;
                
            )query";
            
            queryDict.addTransformerForColumn( "last_viewed_time", SQLite::TransformTimestampAppleSecondsToUnix );
            
            std::vector< CF::Dictionary > records = queryDict.executeQuery( query );
            
            if( records.size() == 0 )
            {
                if( queryDict.errorMessage().length() > 0 )
                {
                    MalwareCheckResult( MalwareCheckResult::Type::Analyzer, MalwareCheckResult::Severity::Warning, 0, this->name(), EVENT_DB_QUERY_ERROR, "'" + domain + "/" + path + "' cannot be parsed (" +  queryDict.errorMessage() + ").", results );
                }
                else
                {
                    MalwareCheckResult( MalwareCheckResult::Type::Analyzer, MalwareCheckResult::Severity::Info, 0, this->name(), EVENT_ANALYSING_ITEMS_INFO, "No Safari sessions to analyze.", results );
                }
                
                return;
            }
            
            MalwareCheckResult( MalwareCheckResult::Type::Analyzer, MalwareCheckResult::Severity::Info, 0, this->name(), EVENT_ANALYSING_ITEMS_INFO, "Analyzing " + std::to_string( records.size() ) + " Safari sessions.", results );
            
            for( const auto & record: records )
            {
                CF::Data data = record[ "session_data" ];
                
                if( data.GetLength() <= 4 )
                {
                    continue;;
                }
                
                data.DeleteBytes( CFRangeMake( 0, 4 ) );
                
                CF::Dictionary plist   = CF::Dictionary::FromPropertyListData( data );
                CF::Dictionary history = plist[ "SessionHistory" ];
                CF::Array      entries = history[ "SessionHistoryEntries" ];
                std::string    title   = CF::String( record[ "title" ] );
                double         ts      = CF::Number( record[ "last_viewed_time" ] );
                
                for( CF::Dictionary entry: entries )
                {
                    if( entry.IsValid() == false )
                    {
                        continue;
                    }
                    
                    Core::Error error    = {};
                    std::string url      = CF::String( entry[ "SessionHistoryEntryURL" ] );
                    auto        check    = indicators.checkURL( url, error );
                    auto        res      = std::get< 0 >( check );
                    auto        finalURL = std::get< 1 >( check );
                    
                    if( error.failure() )
                    {
                        MalwareCheckResult( MalwareCheckResult::Type::Analyzer, MalwareCheckResult::Severity::Info, 0, this->name(), EVENT_ANALYSING_ITEMS_INFO, error.message(), results );
                    }
                    
                    if( res.isSuspicious() )
                    {
                        res.addToResults
                        (
                            this->name(),
                            ts,
                            "Safari visit to '" + finalURL + "' (tab title: " + title + ").",
                            results
                        );
                    }
                }
                
                Core::Error error    = {};
                std::string url      = CF::String( record[ "url" ] );
                auto        check    = indicators.checkURL( url, error );
                auto        res      = std::get< 0 >( check );
                auto        finalURL = std::get< 1 >( check );
                
                if( error.failure() )
                {
                    MalwareCheckResult( MalwareCheckResult::Type::Analyzer, MalwareCheckResult::Severity::Info, 0, this->name(), EVENT_ANALYSING_ITEMS_INFO, error.message(), results );
                }
                
                if( res.isSuspicious() )
                {
                    res.addToResults
                    (
                        this->name(),
                        ts,
                        "Safari visit to '" + finalURL + "' (tab title: " + title + ").",
                        results
                    );
                }
            }
        }
    }
}
