/*******************************************************************************
 * Copyright (c) 2021, DigiDNA
 * All rights reserved
 *
 * This Source Code Form is subject to the terms of the MVT License, v. 1.1.
 * If a copy of the MVT License was not distributed with this file, you can
 * obtain one at https://license.mvt.re/1.1/.
 ******************************************************************************/

#include <DDNAToolKit/C++/MobileDevice/Diagnostics/MalwareActivityChecker/MalwareChecks/DDNA-MalwareCheck-Manifest.hpp>
#include <DDNAToolKit/C++/MobileDevice/Diagnostics/MalwareActivityChecker/DDNA-MalwareActivityDetectionHelper.hpp>

namespace DDNA
{
    namespace MalwareChecks
    {
        std::string Manifest::name() const
        {
            return "Backup Filenames";
        }
        
        std::string Manifest::image() const
        {
            return "BackInTime";
        }
        
        void Manifest::run( Core::SafePointer< Backup > backup, const STIXIndicators & indicators, std::vector< MalwareCheckResult > & results, Core::Progress & progress )
        {
            progress.message( Core::L10N( "MalwareActivityDetectionCheckManifest_Info" ) );
            progress.indeterminate( true );
            
            if( backup->mbdbRecordExists( "RootDomain", "Library/Preferences/com.apple.CrashReporter.plist" ) )
            {
                MalwareCheckResult( MalwareCheckResult::Type::Device, MalwareCheckResult::Severity::Critical, 0, this->name(), EVENT_SUSCPICIOUS_FILENAME, "Found a suspicous 'com.apple.CrashReporter.plist' file in root domain.", results );
            }
            
            Core::SafePointer< MBDBFile > mbdb = backup->mbdbFile();
            
            if( mbdb.isNull() )
            {
                return;
            }
            
            STIXIndicators::IndicatorEntry domains = indicators.domains();
            
            MalwareCheckResult( MalwareCheckResult::Type::Analyzer, MalwareCheckResult::Severity::Info, 0, this->name(), EVENT_ANALYSING_ITEMS_INFO, "Analyzing " + std::to_string( domains.size() ) + " domains in " + std::to_string( mbdb->records().count() ) + " backup filenames.", results );
            
            for( const MBDBRecord * record: mbdb->records().allValues() )
            {
                if( ( record->domain() == "HomeDomain" || record->domain() == "RootDomain" ) && record->path() == "Library/Preferences/com.apple.CrashReporter.plist" )
                {
                    /*
                     * The presence of com.apple.CrashReporter.plist in the root
                     * domain is checked in the code above.
                     * This file may be present in other domains, so we don't
                     * want false positives here.
                     */
                    continue;
                }
                
                {
                    MalwareCheckResult res = indicators.checkFile( record->path() );
                    
                    if( res.isSuspicious() )
                    {
                        res.addToResults
                        (
                            this->name(),
                            static_cast< double >( record->lastModified() ),
                            "Found a known malicious file at path: '" + record->domain().toString() + "/" + record->path().toString() + "'.",
                            results
                        );
                    }
                }
                
                {
                    std::string path = Core::String::toLower( record->path() );
                    
                    for( const auto & p: domains )
                    {
                        if( path.find( Core::String::toLower( p.first ) ) != std::string::npos )
                        {
                            MalwareCheckResult
                            (
                                MalwareCheckResult::Type::Device,
                                MalwareCheckResult::Severity::Warning,
                                static_cast< double >( record->lastModified() ),
                                this->name(),
                                EVENT_INDICATOR_MATCH_DOMAIN,
                                "Found mention of domain '" + p.first  + "' in file at path: '" + record->domain().toString() + "/" + record->path().toString() + "'.",
                                results
                            );
                        }
                    }
                }
            }
        }
    }
}
