/*******************************************************************************
 * Copyright (c) 2021, DigiDNA
 * All rights reserved
 *
 * This Source Code Form is subject to the terms of the MVT License, v. 1.1.
 * If a copy of the MVT License was not distributed with this file, you can
 * obtain one at https://license.mvt.re/1.1/.
 ******************************************************************************/

#include <DDNAToolKit/C++/MobileDevice/Diagnostics/MalwareActivityChecker/MalwareChecks/DDNA-MalwareCheck-ChromeHistory.hpp>
#include <DDNAToolKit/C++/MobileDevice/Diagnostics/MalwareActivityChecker/DDNA-MalwareActivityDetectionHelper.hpp>

#define BACKUP_DOMAIN   "AppDomain-com.google.chrome.ios"
#define BACKUP_DB_PATH  "Library/Application Support/Google/Chrome/Default/History"

namespace DDNA
{
    namespace MalwareChecks
    {
        std::string ChromeHistory::name() const
        {
            return "Chrome History";
        }
        
        std::string ChromeHistory::image() const
        {        
            return MalwareActivityDetectionHelper::AppIconPath( "com.google.chrome.ios" );
        }
        
        void ChromeHistory::run( Core::SafePointer< Backup > backup, const STIXIndicators & indicators, std::vector< MalwareCheckResult > & results, Core::Progress & progress )
        {
            progress.message( Core::L10N( "MalwareActivityDetectionCheckChromeHistory_Info" ) );
            
            if( !backup->mbdbRecordExists( BACKUP_DOMAIN, BACKUP_DB_PATH ) )
            {
                return;
            }
            
            std::string                domain = BACKUP_DOMAIN;
            std::string                path   = BACKUP_DB_PATH;
            std::shared_ptr< sqlite3 > db     = MalwareActivityDetectionHelper::ExtractAndOpenSQLiteDB( backup, domain, path, this->name(), results );
            
            if( db == nullptr )
            {
                return;
            }
            
            SQLite::QueryDictionary queryDict = db.get();
            std::string             query     = R"query(
                
                SELECT
                    urls.id,
                    urls.url,
                    visits.id,
                    visits.visit_time,
                    visits.from_visit
                FROM urls
                JOIN visits ON visits.url = urls.id
                ORDER BY visits.visit_time
                
            )query";
            
            std::vector< CF::Dictionary > records = queryDict.executeQuery( query );
            
            if( records.size() == 0 )
            {
                if( queryDict.errorMessage().length() > 0 )
                {
                    MalwareCheckResult( MalwareCheckResult::Kind::Warning, 0, this->name(), EVENT_DB_QUERY_ERROR, "'" + domain + "/" + path + "' cannot be parsed (" +  queryDict.errorMessage() + ").", results );
                }
                else
                {
                    MalwareCheckResult( MalwareCheckResult::Kind::AnalysisInfo, 0, this->name(), EVENT_ANALYSING_ITEMS_INFO, "No Chrome history entries to analyze.", results );
                }
                
                return;
            }
            
            MalwareCheckResult( MalwareCheckResult::Kind::AnalysisInfo, 0, this->name(), EVENT_ANALYSING_ITEMS_INFO, "Analyzing " + std::to_string( records.size() ) + " Chrome history entries.", results );

            for( const auto & record: records )
            {
                Core::Error   error     = {};
                std::string    url      = CF::String( record[ "url" ] );
                int64_t        ts       = CF::Number( record[ "visit_time" ] );
                Core::DateTime dt       = Core::DateTime( ts / 1000000, Core::DateTime::Epoch::Windows );
                auto           check    = indicators.checkURL( url, error );
                auto           res      = std::get< 0 >( check );
                auto           finalURL = std::get< 1 >( check );
                
                if( error.failure() )
                {
                    MalwareCheckResult( MalwareCheckResult::Kind::AnalysisInfo, 0, this->name(), EVENT_ANALYSING_ITEMS_INFO, error.message(), results );
                }
                
                if( res.isSuspicious() )
                {
                    res.addToResults
                    (
                        this->name(),
                        dt.as( Core::DateTime::Epoch::Unix ),
                        "Chrome visit to '" + finalURL + "'.",
                        results
                    );
                }
            }
        }
    }
}
