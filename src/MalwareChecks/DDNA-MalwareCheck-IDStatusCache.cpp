/*******************************************************************************
 * Copyright (c) 2021, DigiDNA
 * All rights reserved
 *
 * This Source Code Form is subject to the terms of the MVT License, v. 1.1.
 * If a copy of the MVT License was not distributed with this file, you can
 * obtain one at https://license.mvt.re/1.1/.
 ******************************************************************************/

#include <DDNAToolKit/C++/MobileDevice/Diagnostics/MalwareActivityChecker/MalwareChecks/DDNA-MalwareCheck-IDStatusCache.hpp>
#include <DDNAToolKit/C++/MobileDevice/Diagnostics/MalwareActivityChecker/DDNA-MalwareActivityDetectionHelper.hpp>

#define BACKUP_DOMAIN   "HomeDomain"
#define BACKUP_PATH     "Library/Preferences/com.apple.identityservices.idstatuscache.plist"

namespace DDNA
{
    namespace MalwareChecks
    {
        std::string IDStatusCache::name( void ) const
        {
            return "ID Status Cache";
        }
        
        std::string IDStatusCache::image( void ) const
        {
            return "Accounts";
        }
        
        std::vector< iOSDataset > IDStatusCache::iOSDatasets( void ) const
        {
            return
            {
                iOSDataset::customDatasetForTemporaryExtraction
                (
                    "com.apple.identityservices.idstatuscache",
                    { DEVICE_PATH_WILDCARD + BACKUP_PATH },
                    {
                        {
                            BACKUP_DOMAIN,
                            {
                                BACKUP_PATH
                            }
                        }
                    }
                )
            };
        }
        
        void IDStatusCache::run( Core::SafePointer< Backup > backup, const STIXIndicators & indicators, std::vector< MalwareCheckResult > & results, Core::Progress & progress )
        {
            progress.message( Core::L10N( "MalwareActivityDetectionCheckIDStatusCache_Info" ) );
            
            Core::Error error  = {};
            
            // Since iOS 14.7, the idstatus cache is empty
            if( backup->deviceOSVersion() >= Core::Version( "14.7" ) )
            {
                MalwareCheckResult( MalwareCheckResult::Type::Analyzer, MalwareCheckResult::Severity::Info, 0, this->name(), EVENT_PLIST_DICT_IS_EMPTY_ERROR, "'" + std::string( BACKUP_DOMAIN ) + "/" + BACKUP_PATH + "' is empty since iOS 14.7.", results );

                return;
            }
            
            CF::Dictionary plist = MalwareActivityDetectionHelper::ExtractPropertyList( backup, BACKUP_DOMAIN, BACKUP_PATH, true, this->name(), results, error );
            if( error.failure() )
            {
                return;
            }
            
            /*
            UInt8           bytes[]  = { 65, 66, 67, 0, 68, 69, 70 };
            CF::AutoPointer badUser  = CFStringCreateWithBytes( nullptr, bytes, sizeof( bytes ), kCFStringEncodingUTF8, false );
            CF::Dictionary  badEntry = { CF::Pair( CF::String( "IDStatus" ), CF::Number( 42 ) ), CF::Pair( CF::String( "LookupDate" ), CF::Number( 42 ) ) };
            CF::Dictionary  badApp   = { CF::Pair( CF::String( badUser ), badEntry ) };
            
            plist.SetValue( CF::String( "com.apple.foo" ), badApp );
            */

            for( CF::Pair p1: plist )
            {
                CF::String     app      = p1.GetKey();
                CF::Dictionary appEntry = p1.GetValue();
                
                if( app.IsValid() == false || appEntry.IsValid() == false || app.GetLength() == 0 )
                {
                    continue;
                }
                
                for( CF::Pair p2: appEntry )
                {
                    CF::String user          = p2.GetKey();
                    CF::Dictionary userEntry = p2.GetValue();
                    
                    if( user.IsValid() == false || user.GetLength() <= 0 )
                    {
                        continue;
                    }
                    
                    size_t     length = static_cast< size_t >( user.GetLength() );
                    UniChar  * cptr   = static_cast< UniChar * >( calloc( length + 1, sizeof( UniChar ) ) );
                    CF::Number date   = userEntry[ "LookupDate" ];
                    CF::Number status = userEntry[ "IDStatus" ];
                    
                    CFStringGetCharacters( user, CFRangeMake( 0, user.GetLength() ), cptr );
                    
                    for( size_t i = 0; i < length; i++ )
                    {
                        if( cptr[ i ] == 0 )
                        {
                            MalwareCheckResult res =
                            {
                                MalwareCheckResult::Type::Device,
                                MalwareCheckResult::Severity::Critical,
                                MalwareActivityDetectionHelper::AppleTimestampToUnixTimestamp( date.GetDoubleValue() ),
                                this->name(),
                                EVENT_SUSCPICIOUS_VALUE,
                                "Suspicious ID Status Cache entry with \\x00: '" + user.GetValue() + "' (status: " + std::to_string( status.GetSignedLongValue() ) + ", app: " + app.GetValue() + ").",
                                results
                            };
                        }
                    }
                    
                    free( cptr );
                    
                    if( user.GetValue().find( "mailto:" ) == 0 )
                    {
                        std::string email      = Core::String::trim( user.GetValue().substr( 7 ), "'" );
                        MalwareCheckResult res = indicators.checkEmail( email );
                        
                        if( res.isSuspicious() )
                        {
                            res.addToResults
                            (
                                this->name(),
                                Core::DateTime( date.GetSignedLongValue(), Core::DateTime::Epoch::Apple ),
                                "Suspicious ID Status Cache email: '" + email + "' (status: " + std::to_string( status.GetSignedLongValue() ) + ", app: " + app.GetValue() + ").",
                                results
                            );
                        }
                    }
                }
            }
        }
    }
}
