/*******************************************************************************
 * Copyright (c) 2021, DigiDNA
 * All rights reserved
 *
 * This Source Code Form is subject to the terms of the MVT License, v. 1.1.
 * If a copy of the MVT License was not distributed with this file, you can
 * obtain one at https://license.mvt.re/1.1/.
 ******************************************************************************/

#include <DDNAToolKit/C++/MobileDevice/Diagnostics/MalwareActivityChecker/MalwareChecks/DDNA-MalwareCheck-WebKitSessionResourceLog.hpp>
#include <DDNAToolKit/C++/MobileDevice/Diagnostics/MalwareActivityChecker/DDNA-MalwareActivityDetectionHelper.hpp>

namespace DDNA
{
    namespace MalwareChecks
    {
        std::string WebKitSessionResourceLog::name() const
        {
            return "WebKit Session Resource Log";
        }
        
        std::string WebKitSessionResourceLog::image() const
        {
            return "com.apple.mobilesafari";
        }
        
        void WebKitSessionResourceLog::run( Core::SafePointer< Backup > backup, const STIXIndicators & indicators, std::vector< MalwareCheckResult > & results, Core::Progress & progress )
        {
            progress.message( Core::L10N( "MalwareActivityDetectionCheckWebKitSessionResourceLog_Info" ) );
            
            Core::SafePointer< MBDBFile > mbdb = backup->mbdbFile();
            
            if( mbdb.isNull() )
            {
                return;
            }
            
            for( const MBDBRecord * record: mbdb->records().allValues() )
            {
                if( record->fileName() != "full_browsing_session_resourceLog.plist" )
                {
                    continue;
                }
                
                Core::Error    error = {};
                CF::Dictionary plist = MalwareActivityDetectionHelper::ExtractPropertyList( backup, record->domain(), record->path(), false, this->name(), results, error );
                
                if( error.failure() )
                {
                    continue;
                }
                
                // TODO: Find a file to ensure property list structure is correct...
                CF::Dictionary stats = plist[ "browsingStatistics" ];
                CF::Number     date  = stats[ "mostRecentUserInteraction" ];
                CF::Array      urls  = {};
                
                urls.AppendValue( CF::String( stats[ "PrevalentResourceOrigin" ] ) );
                
                for( CF::Dictionary entry: CF::Array( stats[ "topFrameUniqueRedirectsFrom" ] ) )
                {
                    urls.AppendValue( CF::String( entry[ "origin" ] ) );
                    urls.AppendValue( CF::String( entry[ "domain" ] ) );
                }
                
                for( CF::Dictionary entry: CF::Array( stats[ "topFrameUniqueRedirectsTo" ] ) )
                {
                    urls.AppendValue( CF::String( entry[ "origin" ] ) );
                    urls.AppendValue( CF::String( entry[ "domain" ] ) );
                }
                
                for( CF::String url: urls )
                {
                    error = {};
                    
                    auto        check    = indicators.checkURL( url, error );
                    auto        res      = std::get< 0 >( check );
                    auto        finalURL = std::get< 1 >( check );
                    
                    if( error.failure() )
                    {
                        MalwareCheckResult( MalwareCheckResult::Type::Analyzer, MalwareCheckResult::Severity::Warning, 0, this->name(), EVENT_ANALYSING_ITEMS_INFO, error.message(), results );
                    }
                    
                    if( res.isSuspicious() )
                    {
                        res.addToResults
                        (
                            this->name(),
                            date,
                            "Found redirections between suspicious domains: '" + finalURL + "'.",
                            results
                        );
                    }
                }
            }
        }
    }
}
