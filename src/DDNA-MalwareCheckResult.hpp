/*******************************************************************************
 * Copyright (c) 2021, DigiDNA
 * All rights reserved
 *
 * This Source Code Form is subject to the terms of the MVT License, v. 1.1.
 * If a copy of the MVT License was not distributed with this file, you can
 * obtain one at https://license.mvt.re/1.1/.
 ******************************************************************************/

#ifndef DDNA_MALWARE_CHECK_RESULT_HPP
#define DDNA_MALWARE_CHECK_RESULT_HPP

#include <CF++.hpp>

namespace DDNA
{
    class MalwareCheckResult
    {
        public:
            
            enum class Type: int
            {
                Unknown = 1,
                Analyzer,
                Device
            };
            
            enum class Severity: int
            {
                Unknown = 1,
                Info,
                Warning,
                Critical
            };
        
            DDNA_PROPERTY_READWRITE( bool,          isSuspicious )
            DDNA_PROPERTY_READWRITE( Type,          type )
            DDNA_PROPERTY_READWRITE( Severity,      severity )
            DDNA_PROPERTY_READWRITE( std::string,   malwareName )
            DDNA_PROPERTY_READWRITE( std::string,   malwareCheckName )
            DDNA_PROPERTY_READWRITE( double,        timestamp )
            DDNA_PROPERTY_READWRITE( double,        creationTimestamp )
            DDNA_PROPERTY_READWRITE( uint64_t,      sortingIndex )
            DDNA_PROPERTY_READWRITE( std::string,   event )
            DDNA_PROPERTY_READWRITE( std::string,   data )
            
            MalwareCheckResult( void );
            MalwareCheckResult( const std::string & malwareName, const std::string & event );
            MalwareCheckResult( Type type, Severity kind, double timestamp, const std::string & malwareCheckName, const std::string & event, const std::string & data, std::vector< MalwareCheckResult > & results );
            MalwareCheckResult( const MalwareCheckResult & o );
            MalwareCheckResult( MalwareCheckResult && o ) noexcept;
            ~MalwareCheckResult();
            
            MalwareCheckResult & operator =( MalwareCheckResult o );
            
            friend void swap( MalwareCheckResult & o1, MalwareCheckResult & o2 );
            
            void addToResults( const std::string & malwareCheckName, double timestamp, const std::string & data, std::vector< MalwareCheckResult > & results );
    };
}

#endif /* DDNA_MALWARE_CHECK_RESULT_HPP */
